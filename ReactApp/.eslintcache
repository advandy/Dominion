[{"C:\\Users\\D060753\\Documents\\Projects\\Dominion\\ReactApp\\src\\ui\\JoinForm.js":"1","C:\\Users\\D060753\\Documents\\Projects\\Dominion\\ReactApp\\src\\ui\\Gameboard.js":"2","C:\\Users\\D060753\\Documents\\Projects\\Dominion\\ReactApp\\src\\reportWebVitals.js":"3","C:\\Users\\D060753\\Documents\\Projects\\Dominion\\ReactApp\\src\\index.js":"4","C:\\Users\\D060753\\Documents\\Projects\\Dominion\\ReactApp\\src\\App.js":"5","C:\\Users\\D060753\\Documents\\Projects\\Dominion\\ReactApp\\src\\ui\\Player.js":"6"},{"size":1747,"mtime":1607007448596,"results":"7","hashOfConfig":"8"},{"size":1938,"mtime":1607008417154,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1606381925689,"results":"10","hashOfConfig":"8"},{"size":459,"mtime":1606469883077,"results":"11","hashOfConfig":"8"},{"size":634,"mtime":1607076046489,"results":"12","hashOfConfig":"8"},{"size":7198,"mtime":1607077776119,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"1dazaxe",{"filePath":"17","messages":"18","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"C:\\Users\\D060753\\Documents\\Projects\\Dominion\\ReactApp\\src\\ui\\JoinForm.js",["29","30"],"import React from 'react';\r\nexport default class JoinForm extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.socket = props.socket;\r\n      this.state = {value: '', submitted: false, started: false};\r\n  \r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n      this.socket.on(\"joined\", (msg) => {\r\n         \r\n      });\r\n      this.socket.on(\"game\", () => {\r\n        this.setState({started: true})\r\n      })\r\n    }\r\n  \r\n    handleChange(event) {\r\n      this.setState({value: event.target.value});\r\n    }\r\n  \r\n    handleSubmit(event) {\r\n      if (!!this.state.value) {\r\n        this.socket.emit('joined', this.state.value);\r\n        this.setState({submitted: true});\r\n      }\r\n      event.preventDefault();\r\n    }\r\n\r\n    startGame = (event) =>{\r\n      this.socket.emit(\"start\");\r\n      this.setState({started: true});\r\n      event.preventDefault();\r\n    }\r\n  \r\n    render() {\r\n        if (this.state.started) {\r\n          return <a>Welcome {this.state.value}, Game started!</a>\r\n        } else if (this.state.submitted && !this.state.started) {\r\n            return (\r\n                <div> \r\n                  <a>Welcome {this.state.value}</a>\r\n                  <button onClick={this.startGame}>Start Game</button>\r\n                </div>\r\n              )\r\n        } else {\r\n            return (\r\n                <form onSubmit={this.handleSubmit}>\r\n                  <label>\r\n                    Name:\r\n                    <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\r\n                  </label>\r\n                  <input type=\"submit\" value=\"Submit\" />\r\n                </form>\r\n              );\r\n        }\r\n    }\r\n  }","C:\\Users\\D060753\\Documents\\Projects\\Dominion\\ReactApp\\src\\ui\\Gameboard.js",["31","32","33"],"import React from 'react';\r\nexport default class Gameboard extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.socket = props.socket;\r\n      this.state = {cards: null};\r\n      this.STACK = [\r\n          \"Copper\", \"Silver\", \"Gold\", \r\n          \"Estate\", \"Duchy\", \"Province\", \r\n          \"Cellar\",\"Chapel\",\r\n          \"Village\", \"Woodcutter\", \"Workshop\",\r\n          \"Militia\", \"Remodel\", \"Smithy\",\r\n          \"Market\", \"Mine\"\r\n      ]\r\n      this.socket.on(\"broadcast\", (payload) => {\r\n        this.setState({cards: payload.gameStack})\r\n      });\r\n    }\r\n    \r\n    handleBuy = (event) => {\r\n        const card_name = event.currentTarget.getAttribute(\"data\");\r\n        this.socket.emit(\"game\", {event: \"buy\", payload: card_name})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.cards) {\r\n            return(\r\n                <div style={{position: \"fixed\", width: \"55%\", left:\"22.5%\"}}>\r\n                    {\r\n                        this.STACK.map((card_name) => {\r\n                            let cards = this.state.cards[card_name].cards;\r\n                            let size = cards.length;\r\n                            return (<div style={{position: \"relative\", width: \"12.5%\", display: \"inline-flex\"}}>\r\n                                <a> <img style={{height: \"170px\"}} src={\"img/\" + card_name +\".jpg\"}></img></a>\r\n                                <a style={{borderRadius: \"25%\", color: \"white\", background: \"red\", width: \"20px\", height: \"25px\", marginLeft: \"-7px\"}} class=\"card_count\"> {size} </a>\r\n                                <button style={{borderRadius: \"25%\",marginLeft: \"-22px\", marginTop: \"150px\"}} data={card_name} onClick={this.handleBuy}>+</button>                        \r\n                            </div>)\r\n                        })\r\n                    }\r\n                </div>\r\n            )\r\n        } else {\r\n            return <p>Game not started yet</p>\r\n        }\r\n    }\r\n}","C:\\Users\\D060753\\Documents\\Projects\\Dominion\\ReactApp\\src\\reportWebVitals.js",[],"C:\\Users\\D060753\\Documents\\Projects\\Dominion\\ReactApp\\src\\index.js",[],"C:\\Users\\D060753\\Documents\\Projects\\Dominion\\ReactApp\\src\\App.js",[],"C:\\Users\\D060753\\Documents\\Projects\\Dominion\\ReactApp\\src\\ui\\Player.js",["34","35","36","37","38","39"],"import React from 'react';\r\nexport default class Player extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.socket = props.socket;\r\n      this.state = {handStack: null, status: null};\r\n      this.multiSelect = false;\r\n      this.multiSelectMax = 0; //Chapel action\r\n      this.showAction = false;\r\n      this.showDiscardCards = false; //Cellar action\r\n      this.showTrashCards = false; //Chapel action\r\n      this.STACK = [\r\n          \"Copper\", \"Silver\", \"Gold\", \r\n          \"Estate\", \"Duchy\", \"Province\", \r\n          \"Cellar\",\"Chapel\",\r\n          \"Village\", \"Woodcutter\", \"Workshop\",\r\n          \"Militia\", \"Remodel\", \"Smithy\",\r\n          \"Market\", \"Mine\"\r\n      ]\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.socket.on(\"game\", (msg) => {\r\n            if (msg.event === \"error\") {\r\n                return alert(msg.payload);\r\n            }\r\n    \r\n            if (msg.event === \"action_played\") {\r\n                if (msg.payload.actionCard.name === \"Cellar\" && msg.payload.actionCard.status === \"waiting\") {\r\n                    this.multiSelect = true;\r\n                    this.showDiscardCards = true;\r\n                } else if (msg.payload.actionCard.name === \"Chapel\" && msg.payload.actionCard.status === \"waiting\") {\r\n                    this.multiSelect = true;\r\n                    this.showTrashCards = true;\r\n                    this.multiSelectMax = 4;\r\n                }\r\n            }\r\n \r\n            return  this.setState({handStack: msg.payload.handStack.cards, status: msg.payload.status});\r\n        });\r\n    }\r\n\r\n    handleClick = (event) => {\r\n        const cards = this.state.handStack;\r\n        const id = event.currentTarget.getAttribute(\"data\");\r\n        let selectedCard = null;\r\n        this.showAction = false\r\n        if (!this.multiSelect) {\r\n            cards.forEach((card) => {\r\n                if (card.id !== Number(id)) {\r\n                    card.selected = false;\r\n                } else {\r\n                    selectedCard = card;\r\n                    card.selected = !card.selected;\r\n                }\r\n            });\r\n\r\n            if (selectedCard && selectedCard.type === \"action\" &&\r\n                !selectedCard.isUsed && selectedCard.enabled) {\r\n                    this.showAction = selectedCard.selected && this.state.status && this.state.status.actionCount > 0;\r\n                }\r\n\r\n        } else {\r\n            let count = 0;\r\n            cards.forEach((card) => {\r\n                if (card.id === Number(id)) {\r\n                    card.selected = !card.selected;\r\n                } \r\n                \r\n                if (this.multiSelectMax !== 0 && card.selected) {\r\n                    count ++;\r\n                    if (count > this.multiSelectMax) {\r\n                        alert(\"Only up to \" + this.multiSelectMax + \" cards\");\r\n                        cards.forEach((card) => {\r\n                            if (card.id === Number(id)) {\r\n                                card.selected = false;\r\n                            } \r\n                        })\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        this.setState({handStack: cards});\r\n    }\r\n\r\n    handleFinish = () => {\r\n        this.showAction = false;\r\n        this.multiSelect = false;\r\n        this.showDiscardCards = false;\r\n        this.showTrashCards = false;\r\n        this.setState({handStack: null, status: null});\r\n        this.socket.emit(\"game\", {event: \"finish_round\"});\r\n    }\r\n\r\n    handleDiscardCards  = () => {\r\n        const cards = this.state.handStack\r\n                        .filter(card => card.selected)\r\n                        .map(card => card.id);\r\n        this.showAction = false;\r\n        this.multiSelect = false;\r\n        this.showDiscardCards = false;\r\n        this.multiSelectMax = 0;\r\n        this.socket.emit(\"game\", {event: \"action_cellar\", payload: cards});\r\n    }\r\n\r\n    handleTrashCards = () => {\r\n        const cards = this.state.handStack\r\n                        .filter(card => card.selected)\r\n                        .map(card => card.id);\r\n        this.showAction = false;\r\n        this.multiSelect = false;\r\n        this.showTrashCards = false;\r\n        this.socket.emit(\"game\", {event: \"action_chapel\", payload: cards});\r\n    }\r\n\r\n    handleAction = () => {\r\n        let card_id = null;\r\n        this.state.handStack.forEach((card) => {\r\n            if (card.selected && card.type === \"action\") {\r\n                return card_id = card.id\r\n            }\r\n        });\r\n        this.showAction = false;\r\n        this.socket.emit(\"game\", {event: \"action\", payload: card_id});\r\n    }\r\n    \r\n    render() {\r\n        if (this.state.handStack) {\r\n            let actionButton, discardButton, statusBar, trashButton;\r\n            if (this.showAction) {\r\n                actionButton = <button onClick={this.handleAction}>Play Action</button>;\r\n            }\r\n            if (this.showDiscardCards) {\r\n                discardButton = <button onClick={this.handleDiscardCards}>Discard Cards</button>;\r\n            }\r\n            if (this.showTrashCards) {\r\n                trashButton = <button onClick={this.handleTrashCards}>Trash up to 4 Cards</button>;\r\n            }\r\n            if (this.state.status) {\r\n            statusBar = (<div style={{width: \"100%\", position: \"relative\", fontSize: \"xx-large\", color: \"honeydew\"}}>\r\n                    <i>Buy: {this.state.status.buyCount}, </i>\r\n                    <i>Action: {this.state.status.actionCount}, </i>\r\n                    <i>Coin: {this.state.status.value}, </i>\r\n                </div>\r\n            )\r\n            }\r\n            return (<div className=\"player\" style={{width: \"50%\", position: \"fixed\", left: \"25%\" , bottom: \"10px\"}}>\r\n                <div className=\"playedCardArea\" style={{width: \"100%\"}}>\r\n                {\r\n                    this.state.handStack\r\n                    .filter(card => card.isUsed)\r\n                    .map((card) => {\r\n                        return <a><img style={{width: \"120px\", margin: \"10px\"}} data={card.id} src={\"img/\" + card.name +\".jpg\"}></img></a>\r\n                    })\r\n                }\r\n                </div>\r\n\r\n                {statusBar}\r\n                {actionButton}\r\n                {discardButton}\r\n                {trashButton}\r\n                <button onClick={this.handleFinish}>Finish</button>\r\n\r\n                {\r\n                    this.state.handStack\r\n                    .filter(card => !card.isUsed)\r\n                    .map((card) => {\r\n                       if (card.selected) {\r\n                            return <a><img style={{width: \"120px\", margin: \"10px\", border: \"10px solid gold\"}} data={card.id} onClick={this.handleClick} src={\"img/\" + card.name +\".jpg\"}></img></a>\r\n                       } else {\r\n                            return <a><img style={{width: \"120px\", margin: \"10px\"}} data={card.id} onClick={this.handleClick} src={\"img/\" + card.name +\".jpg\"}></img></a>\r\n                       }\r\n                        \r\n                    })\r\n                }\r\n\r\n\r\n            </div>)\r\n        }\r\n\r\n        return <div style={{width: \"30%\", position: \"relative\", float: \"left\", marginRight: \"20px\"}}></div>\r\n    }\r\n}",{"ruleId":"40","severity":1,"message":"41","line":38,"column":18,"nodeType":"42","endLine":38,"endColumn":21},{"ruleId":"40","severity":1,"message":"41","line":42,"column":19,"nodeType":"42","endLine":42,"endColumn":22},{"ruleId":"40","severity":1,"message":"41","line":34,"column":33,"nodeType":"42","endLine":34,"endColumn":36},{"ruleId":"43","severity":1,"message":"44","line":34,"column":37,"nodeType":"42","endLine":34,"endColumn":101},{"ruleId":"40","severity":1,"message":"41","line":35,"column":33,"nodeType":"42","endLine":35,"endColumn":171},{"ruleId":"40","severity":1,"message":"41","line":154,"column":32,"nodeType":"42","endLine":154,"endColumn":35},{"ruleId":"43","severity":1,"message":"44","line":154,"column":35,"nodeType":"42","endLine":154,"endColumn":129},{"ruleId":"40","severity":1,"message":"41","line":170,"column":36,"nodeType":"42","endLine":170,"endColumn":39},{"ruleId":"43","severity":1,"message":"44","line":170,"column":39,"nodeType":"42","endLine":170,"endColumn":187},{"ruleId":"40","severity":1,"message":"41","line":172,"column":36,"nodeType":"42","endLine":172,"endColumn":39},{"ruleId":"43","severity":1,"message":"44","line":172,"column":39,"nodeType":"42","endLine":172,"endColumn":160},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images."]