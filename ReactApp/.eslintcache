[{"C:\\Users\\D060753\\Documents\\Projects\\Dominion\\ReactApp\\src\\ui\\JoinForm.js":"1","C:\\Users\\D060753\\Documents\\Projects\\Dominion\\ReactApp\\src\\ui\\Gameboard.js":"2","C:\\Users\\D060753\\Documents\\Projects\\Dominion\\ReactApp\\src\\reportWebVitals.js":"3","C:\\Users\\D060753\\Documents\\Projects\\Dominion\\ReactApp\\src\\index.js":"4","C:\\Users\\D060753\\Documents\\Projects\\Dominion\\ReactApp\\src\\App.js":"5","C:\\Users\\D060753\\Documents\\Projects\\Dominion\\ReactApp\\src\\ui\\Player.js":"6"},{"size":1747,"mtime":1606469543181,"results":"7","hashOfConfig":"8"},{"size":2496,"mtime":1606470647190,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1606381925689,"results":"10","hashOfConfig":"8"},{"size":459,"mtime":1606469883077,"results":"11","hashOfConfig":"8"},{"size":489,"mtime":1606397248281,"results":"12","hashOfConfig":"8"},{"size":5288,"mtime":1606473067100,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1dazaxe",{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},"C:\\Users\\D060753\\Documents\\Projects\\Dominion\\ReactApp\\src\\ui\\JoinForm.js",[],"C:\\Users\\D060753\\Documents\\Projects\\Dominion\\ReactApp\\src\\ui\\Gameboard.js",["27","28"],"C:\\Users\\D060753\\Documents\\Projects\\Dominion\\ReactApp\\src\\reportWebVitals.js",[],"C:\\Users\\D060753\\Documents\\Projects\\Dominion\\ReactApp\\src\\index.js",[],"C:\\Users\\D060753\\Documents\\Projects\\Dominion\\ReactApp\\src\\App.js",[],"C:\\Users\\D060753\\Documents\\Projects\\Dominion\\ReactApp\\src\\ui\\Player.js",["29","30","31","32","33","34"],"import React from 'react';\r\nexport default class Player extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.socket = props.socket;\r\n      this.state = {handStack: null, deskStack: null};\r\n      this.multiSelect = false;\r\n      this.showAction = false;\r\n      this.showDiscardCards = false; //Cellar action\r\n      this.STACK = [\r\n          \"Copper\", \"Silver\", \"Gold\", \r\n          \"Estate\", \"Duchy\", \"Province\", \r\n          \"Cellar\",\"Chapel\",\r\n          \"Village\", \"Woodcutter\", \"Workshop\",\r\n          \"Militia\", \"Remodel\", \"Smithy\",\r\n          \"Market\", \"Mine\"\r\n      ]\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.socket.on(\"game\", (msg) => {\r\n            if (msg.event === \"error\") {\r\n                return alert(msg.payload);\r\n            }\r\n            if (msg.event === \"new round\" || msg.event === \"bought\") {\r\n                return this.setState({handStack: msg.payload.handStack.cards})\r\n            }\r\n    \r\n            if (msg.event === \"action_played\") {\r\n                if (msg.payload.actionCard.name === \"Cellar\" && msg.payload.actionCard.status === \"waiting\") {\r\n                    this.multiSelect = true;\r\n                    this.showDiscardCards = true;\r\n                }\r\n                this.setState({handStack: msg.payload.handStack.cards});\r\n            }\r\n\r\n            if (msg.event === \"action_cellar_complete\") {\r\n                this.setState({handStack: msg.payload.cards});\r\n            }\r\n        });\r\n    }\r\n\r\n    handleClick = (event) => {\r\n        const cards = this.state.handStack;\r\n        const id = event.currentTarget.getAttribute(\"data\");\r\n        let selectedCard = null;\r\n        this.showAction = false\r\n        if (!this.multiSelect) {\r\n            cards.forEach((card) => {\r\n                if (card.id !== Number(id)) {\r\n                    card.selected = false;\r\n                } else {\r\n                    selectedCard = card;\r\n                    card.selected = !card.selected;\r\n                }\r\n            });\r\n\r\n            if (selectedCard && selectedCard.type === \"action\" &&\r\n                !selectedCard.isUsed && selectedCard.enabled) {\r\n                    this.showAction = selectedCard.selected;\r\n                }\r\n\r\n        } else {\r\n            cards.forEach((card) => {\r\n                if (card.id === Number(id)) {\r\n                    card.selected = !card.selected;\r\n                    return;\r\n                }\r\n            });\r\n        }\r\n\r\n        this.setState({handStack: cards});\r\n    }\r\n\r\n    handleFinish = () => {\r\n        this.showAction = false;\r\n        this.multiSelect = false;\r\n        this.socket.emit(\"game\", {event: \"finish_round\"});\r\n    }\r\n\r\n    handleDiscardCards  = () => {\r\n        const cards = this.state.handStack\r\n                        .filter(card => card.selected)\r\n                        .map(card => card.id);\r\n        this.showAction = false;\r\n        this.multiSelect = false;\r\n        this.showDiscardCards = false;\r\n        this.socket.emit(\"game\", {event: \"action_cellar\", payload: cards});\r\n    }\r\n\r\n    handleAction = () => {\r\n        let card_id = null;\r\n        this.state.handStack.forEach((card) => {\r\n            if (card.selected && card.type === \"action\") {\r\n                return card_id = card.id\r\n            }\r\n        });\r\n        this.showAction = false;\r\n        this.socket.emit(\"game\", {event: \"action\", payload: card_id});\r\n    }\r\n    \r\n    render() {\r\n        if (this.state.handStack) {\r\n            let actionButton, discardButton;\r\n            if (this.showAction) {\r\n                actionButton = <button onClick={this.handleAction}>Play Action</button>;\r\n            }\r\n            if (this.showDiscardCards) {\r\n                discardButton = <button onClick={this.handleDiscardCards}>Discard Cards</button>;\r\n            }\r\n            return (<div style={{width: \"30%\", position: \"relative\", float: \"left\", background: \"rgb(237, 212, 166)\", marginRight: \"20px\"}}>\r\n                {\r\n                    this.state.handStack\r\n                    .filter(card => !card.isUsed)\r\n                    .map((card) => {\r\n                       if (card.selected) {\r\n                            return <a><img style={{width: \"100px\", margin: \"10px\", border: \"10px solid gold\"}} data={card.id} onClick={this.handleClick} src={\"img/\" + card.name +\".jpg\"}></img></a>\r\n                       } else {\r\n                            return <a><img style={{width: \"100px\", margin: \"10px\"}} data={card.id} onClick={this.handleClick} src={\"img/\" + card.name +\".jpg\"}></img></a>\r\n                       }\r\n                        \r\n                    })\r\n                }\r\n\r\n                {actionButton}\r\n                {discardButton}\r\n                <button onClick={this.handleFinish}>Finish</button>\r\n\r\n                {\r\n                    this.state.handStack\r\n                    .filter(card => card.isUsed)\r\n                    .map((card) => {\r\n                        return <a><img style={{width: \"100px\", margin: \"10px\", opacity: \"0.7\"}} data={card.id} src={\"img/\" + card.name +\".jpg\"}></img></a>\r\n                    })\r\n                }\r\n\r\n\r\n            </div>)\r\n        }\r\n\r\n        return <div style={{width: \"30%\", position: \"relative\", float: \"left\", marginRight: \"20px\"}}></div>\r\n    }\r\n}",{"ruleId":"35","severity":1,"message":"36","line":34,"column":33,"nodeType":"37","endLine":34,"endColumn":66},{"ruleId":"38","severity":1,"message":"39","line":45,"column":45,"nodeType":"37","endLine":45,"endColumn":111},{"ruleId":"35","severity":1,"message":"36","line":117,"column":36,"nodeType":"37","endLine":117,"endColumn":39},{"ruleId":"38","severity":1,"message":"39","line":117,"column":39,"nodeType":"37","endLine":117,"endColumn":187},{"ruleId":"35","severity":1,"message":"36","line":119,"column":36,"nodeType":"37","endLine":119,"endColumn":39},{"ruleId":"38","severity":1,"message":"39","line":119,"column":39,"nodeType":"37","endLine":119,"endColumn":160},{"ruleId":"35","severity":1,"message":"36","line":133,"column":32,"nodeType":"37","endLine":133,"endColumn":35},{"ruleId":"38","severity":1,"message":"39","line":133,"column":35,"nodeType":"37","endLine":133,"endColumn":145},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images."]